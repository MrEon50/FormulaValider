import json
import os
from sympy import sympify, symbols, Eq
from sympy.parsing.sympy_parser import parse_expr

class FormulaValider:
    """
    System walidacji wzor√≥w matematyczno-fizycznych
    Œ£ (Sigma) - sprawdzenie sk≈Çadni matematycznej
    Œî (Delta) - sprawdzenie sp√≥jno≈õci jednostek fizycznych
    """
    
    def __init__(self, formula_str, units_dict=None, description=""):
        self.formula_str = formula_str.strip()
        self.units_dict = units_dict or {}
        self.description = description
        self.syntax_valid = False
        self.units_valid = None
        
    def check_syntax(self):
        """Œ£ (Sigma) - Sprawdzenie sk≈Çadni matematycznej"""
        try:
            # Sprawd≈∫ czy wz√≥r zawiera znak r√≥wno≈õci
            if '=' not in self.formula_str:
                return False, "B≈ÇƒÖd: Wz√≥r musi zawieraƒá znak r√≥wno≈õci '='"
            
            # Podziel na lewƒÖ i prawƒÖ stronƒô
            parts = self.formula_str.split('=')
            if len(parts) != 2:
                return False, "B≈ÇƒÖd: Wz√≥r mo≈ºe zawieraƒá tylko jeden znak r√≥wno≈õci"
            
            lhs, rhs = parts[0].strip(), parts[1].strip()
            
            # Sprawd≈∫ sk≈Çadniƒô obu stron
            lhs_expr = sympify(lhs)
            rhs_expr = sympify(rhs)
            
            self.syntax_valid = True
            return True, f"‚úì Sk≈Çadnia poprawna (Œ£): {lhs} = {rhs}"
            
        except Exception as e:
            self.syntax_valid = False
            return False, f"‚úó B≈ÇƒÖd sk≈Çadniowy (Œ£): {str(e)}"
    
    def check_units(self):
        """Œî (Delta) - Sprawdzenie sp√≥jno≈õci jednostek fizycznych"""
        if not self.units_dict:
            return None, "‚ö† Brak danych jednostkowych do sprawdzenia (Œî)"
        
        if not self.syntax_valid:
            return False, "‚úó Nie mo≈ºna sprawdziƒá jednostek - b≈Çƒôdna sk≈Çadnia"
        
        try:
            # Podziel wz√≥r na lewƒÖ i prawƒÖ stronƒô
            lhs, rhs = self.formula_str.split('=')
            lhs, rhs = lhs.strip(), rhs.strip()
            
            # Pobierz symbole z obu stron
            lhs_symbols = set(str(s) for s in sympify(lhs).free_symbols)
            rhs_symbols = set(str(s) for s in sympify(rhs).free_symbols)
            all_symbols = lhs_symbols | rhs_symbols
            
            # Sprawd≈∫ czy wszystkie symbole majƒÖ zdefiniowane jednostki
            missing_units = [s for s in all_symbols if s not in self.units_dict]
            if missing_units:
                return False, f"‚úó Brak jednostek dla symboli: {', '.join(missing_units)}"
            
            # Dla prostoty - sprawdzamy czy jednostki sƒÖ zdefiniowane
            # W przysz≈Ço≈õci mo≈ºna dodaƒá pe≈ÇnƒÖ analizƒô wymiarowƒÖ
            lhs_unit = self.units_dict.get(lhs, "nieznana")
            
            self.units_valid = True
            return True, f"‚úì Jednostki zdefiniowane (Œî): {lhs} [{lhs_unit}]"
            
        except Exception as e:
            self.units_valid = False
            return False, f"‚úó B≈ÇƒÖd analizy jednostek (Œî): {str(e)}"
    
    def validate(self):
        """Pe≈Çna walidacja wzoru (Œ£ + Œî)"""
        print(f"\n{'='*50}")
        print(f"WALIDACJA WZORU: {self.formula_str}")
        if self.description:
            print(f"Opis: {self.description}")
        print(f"{'='*50}")
        
        # Sprawd≈∫ sk≈Çadniƒô (Œ£)
        syntax_ok, syntax_msg = self.check_syntax()
        print(f"[Œ£] {syntax_msg}")
        
        # Sprawd≈∫ jednostki (Œî)
        units_ok, units_msg = self.check_units()
        print(f"[Œî] {units_msg}")
        
        # Podsumowanie
        print(f"\n{'‚îÄ'*30}")
        if syntax_ok and (units_ok or units_ok is None):
            print("üéâ WZ√ìR POPRAWNY!")
        elif syntax_ok:
            print("‚ö†Ô∏è  WZ√ìR CZƒò≈öCIOWO POPRAWNY (sk≈Çadnia OK, sprawd≈∫ jednostki)")
        else:
            print("‚ùå WZ√ìR NIEPOPRAWNY")
        print(f"{'‚îÄ'*30}")

def load_formulas_from_json(filename="formulas.json"):
    """Wczytaj wzory z pliku JSON"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return get_builtin_formulas()
    except Exception as e:
        print(f"B≈ÇƒÖd wczytywania pliku JSON: {e}")
        return get_builtin_formulas()

def get_builtin_formulas():
    """Wbudowane wzory (fallback gdy brak pliku JSON)"""
    return [
        {
            "id": "001",
            "formula": "E = m * c**2",
            "description": "R√≥wnanie r√≥wnowa≈ºno≈õci masy i energii (Einstein)",
            "category": "Fizyka - Relatywistyka",
            "units": {
                "E": "J",
                "m": "kg", 
                "c": "m/s"
            }
        },
        {
            "id": "002", 
            "formula": "F = m * a",
            "description": "Druga zasada dynamiki Newtona",
            "category": "Fizyka - Mechanika",
            "units": {
                "F": "N",
                "m": "kg",
                "a": "m/s**2"
            }
        },
        {
            "id": "003",
            "formula": "P = U * I", 
            "description": "Prawo Ohma dla mocy elektrycznej",
            "category": "Fizyka - Elektryczno≈õƒá",
            "units": {
                "P": "W",
                "U": "V", 
                "I": "A"
            }
        },
        {
            "id": "004",
            "formula": "v = s / t",
            "description": "Prƒôdko≈õƒá jako stosunek drogi do czasu", 
            "category": "Fizyka - Kinematyka",
            "units": {
                "v": "m/s",
                "s": "m",
                "t": "s"
            }
        }
    ]

def create_sample_json():
    """Utw√≥rz przyk≈Çadowy plik formulas.json"""
    formulas = get_builtin_formulas()
    try:
        with open("formulas.json", 'w', encoding='utf-8') as f:
            json.dump(formulas, f, indent=2, ensure_ascii=False)
        print("‚úì Utworzono przyk≈Çadowy plik 'formulas.json'")
    except Exception as e:
        print(f"B≈ÇƒÖd tworzenia pliku JSON: {e}")

def show_info():
    """Wy≈õwietl informacje o systemie Œ£/Œî"""
    info = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           FORMULAVALIDER v1.0                               ‚ïë
‚ïë                    System Walidacji Wzor√≥w Œ£/Œî (Sigma/Delta)                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üîç WARSTWY WALIDACJI:

[Œ£] SIGMA - Sprawdzenie sk≈Çadni matematycznej
    ‚Ä¢ Czy wz√≥r zawiera znak r√≥wno≈õci '='?
    ‚Ä¢ Czy lewa i prawa strona sƒÖ poprawnie zapisane matematycznie?
    ‚Ä¢ U≈ºywa biblioteki SymPy do parsowania wyra≈ºe≈Ñ

[Œî] DELTA - Sprawdzenie sp√≥jno≈õci jednostek fizycznych  
    ‚Ä¢ Czy wszystkie symbole majƒÖ zdefiniowane jednostki?
    ‚Ä¢ Czy jednostki po obu stronach r√≥wnania sƒÖ sp√≥jne?
    ‚Ä¢ Podstawa dla przysz≈Çej pe≈Çnej analizy wymiarowej

üöÄ PRZYSZ≈ÅE ROZSZERZENIA:

[Œõ] LAMBDA - Analiza semantyczna symboli
    ‚Ä¢ Znaczenie symboli (masa, energia, si≈Ça...)
    ‚Ä¢ Typ wielko≈õci fizycznej (skalarna, wektorowa...)
    ‚Ä¢ Kontekst dziedziny nauki

[Œ†] PI - Zgodno≈õƒá z prawami fizyki
    ‚Ä¢ Weryfikacja z bazƒÖ wiedzy fizycznej
    ‚Ä¢ Sprawdzenie granic stosowalno≈õci wzoru
    ‚Ä¢ Integracja z systemami AGI

üìù JAK TWORZYƒÜ WZORY:

1. Format: "lewa_strona = prawa_strona"
   Przyk≈Çad: "F = m * a"

2. U≈ºywaj standardowych operator√≥w:
   ‚Ä¢ + - * / (podstawowe dzia≈Çania)
   ‚Ä¢ ** (potƒôgowanie)
   ‚Ä¢ sqrt() (pierwiastek)
   ‚Ä¢ sin(), cos(), log() (funkcje)

3. Jednostki w formacie s≈Çownika:
   {"F": "N", "m": "kg", "a": "m/s**2"}

4. Przyk≈Çady poprawnych wzor√≥w:
   ‚Ä¢ E = m * c**2
   ‚Ä¢ F = m * a  
   ‚Ä¢ P = U * I
   ‚Ä¢ v = s / t
   ‚Ä¢ A = pi * r**2

üí° TIPS:
‚Ä¢ Program jest gotowy do kompilacji przez PyInstaller
‚Ä¢ Mo≈ºna rozszerzyƒá bazƒô wzor√≥w w pliku formulas.json
‚Ä¢ Kod jest modularny - ≈Çatwo dodaƒá nowe warstwy walidacji

Autor: System FormulaValider - pierwsza implementacja walidacji Œ£/Œî
"""
    print(info)

def menu_check_custom():
    """Menu - sprawd≈∫ w≈Çasny wz√≥r"""
    print("\n" + "="*50)
    print("           SPRAWD≈π W≈ÅASNY WZ√ìR")
    print("="*50)
    
    formula = input("Podaj wz√≥r (np. 'F = m * a'): ").strip()
    if not formula:
        print("‚ùå Nie podano wzoru!")
        return
    
    print("\nCzy chcesz dodaƒá jednostki? (t/n): ", end="")
    add_units = input().lower().startswith('t')
    
    units = {}
    if add_units:
        print("\nPodaj jednostki dla symboli (Enter aby zako≈Ñczyƒá):")
        print("Format: symbol jednostka (np. 'F N')")
        
        while True:
            unit_input = input("Symbol i jednostka: ").strip()
            if not unit_input:
                break
            
            parts = unit_input.split()
            if len(parts) >= 2:
                symbol = parts[0]
                unit = ' '.join(parts[1:])
                units[symbol] = unit
                print(f"  ‚úì {symbol} -> {unit}")
            else:
                print("  ‚ùå Niepoprawny format!")
    
    # Walidacja
    validator = FormulaValider(formula, units)
    validator.validate()

def menu_check_predefined():
    """Menu - wybierz wz√≥r z listy"""
    print("\n" + "="*50)
    print("         WZORY Z GOTOWEJ LISTY")
    print("="*50)
    
    formulas = load_formulas_from_json()
    
    print("\nDostƒôpne wzory:")
    for i, formula in enumerate(formulas, 1):
        print(f"{i:2d}. {formula['formula']} - {formula['description']}")
    
    try:
        choice = int(input(f"\nWybierz wz√≥r (1-{len(formulas)}): "))
        if 1 <= choice <= len(formulas):
            selected = formulas[choice-1]
            validator = FormulaValider(
                selected['formula'], 
                selected.get('units', {}),
                selected['description']
            )
            validator.validate()
        else:
            print("‚ùå Niepoprawny wyb√≥r!")
    except ValueError:
        print("‚ùå Podaj liczbƒô!")

def main_menu():
    """G≈Ç√≥wne menu programu"""
    while True:
        print("\n" + "‚ïî" + "‚ïê"*48 + "‚ïó")
        print("‚ïë" + " "*16 + "FORMULAVALIDER" + " "*17 + "‚ïë")
        print("‚ïë" + " "*12 + "System Walidacji Œ£/Œî" + " "*15 + "‚ïë") 
        print("‚ï†" + "‚ïê"*48 + "‚ï£")
        print("‚ïë  1. Sprawd≈∫ w≈Çasny wz√≥r" + " "*24 + "‚ïë")
        print("‚ïë  2. Wybierz wz√≥r z gotowej listy" + " "*15 + "‚ïë")
        print("‚ïë  3. Informacje o systemie Œ£/Œî" + " "*17 + "‚ïë")
        print("‚ïë  4. Utw√≥rz przyk≈Çadowy formulas.json" + " "*10 + "‚ïë")
        print("‚ïë  5. Wyj≈õcie" + " "*36 + "‚ïë")
        print("‚ïö" + "‚ïê"*48 + "‚ïù")
        
        choice = input("\nWybierz opcjƒô (1-5): ").strip()
        
        if choice == '1':
            menu_check_custom()
        elif choice == '2':
            menu_check_predefined()
        elif choice == '3':
            show_info()
        elif choice == '4':
            create_sample_json()
        elif choice == '5':
            print("\nüëã Do widzenia!")
            break
        else:
            print("‚ùå Niepoprawny wyb√≥r! Wybierz 1-5.")

if __name__ == "__main__":
    print("üöÄ Uruchamianie FormulaValider...")
    main_menu()
